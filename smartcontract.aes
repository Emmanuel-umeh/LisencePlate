payable contract ParkingLot =   
    type i = int
    type s = string
    type a = address
    type b = bool

    record car = {
        id : i,
        owner : a,
        nameOfCar	  : s,
        nameOfOwner : s,
        lisencePlate	  : s,
        entryDate : i,
        exitDate : i,
        checkedOut : b
         }
   
    record state = 
        { cars : map(i, car),
        totalCars : i}
 
    entrypoint init() = {
        cars = {},
        totalCars = 0 }

    entrypoint getCar(index : i) : car = 
        switch(Map.lookup(index, state.cars))
            None  => abort("There is no Cars with that ID.")
            Some(x) => x  

    stateful entrypoint addCar(nameOfCar' : s,nameOfOwner' : s, lisencePlate' : s) = 
       
        let index = getTotalCars() + 1
        let car = {id= index,  
            owner  = Call.caller,
            nameOfCar = nameOfCar',
            nameOfOwner = nameOfOwner',
            lisencePlate =  lisencePlate',
            entryDate = Chain.timestamp,
            exitDate = 0,
            checkedOut = false   }
        put(state {cars[index] = car, totalCars = index})

    stateful payable entrypoint checkOut(index : i) = 
        let carToCheckOut = getCar(index)
        require(carToCheckOut.checkedOut != true, "This car has already been checkout out")
        Chain.spend(Contract.address, 100000)
        
        let updateDate = state.cars[index].entryDate
        put(state{cars[index].exitDate = updateDate + Chain.block_height, cars[index].checkedOut = true   })

    entrypoint getTotalCars() : i = 
        state.totalCars

        